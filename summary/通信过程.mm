
<map>
  <node ID="root" TEXT="通信过程">
    <node TEXT="连接建立" ID="XloYagghVq" _mubu_text="%3Cspan%3E%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%3C/span%3E" STYLE="bubble" POSITION="right">
      <node TEXT="连接建立的步骤" ID="3mWVs2QAdu" _mubu_text="%3Cspan%3E%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E7%9A%84%E6%AD%A5%E9%AA%A4%3C/span%3E" STYLE="fork">
        <node TEXT="1. socket() // 调用socket函数建立监听套接字" ID="MwFDATyifj" _mubu_text="%3Cspan%20class=%22codespan%22%3E1.%20socket()%20//%20%E8%B0%83%E7%94%A8socket%E5%87%BD%E6%95%B0%E5%BB%BA%E7%AB%8B%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97%3C/span%3E" STYLE="fork"/>
        <node TEXT="2. bind() // 绑定监听地址和端口" ID="Y3aacu0010" _mubu_text="%3Cspan%20class=%22codespan%22%3E2.%20bind()%20//%20%E7%BB%91%E5%AE%9A%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
        <node TEXT="3. listen() // 开始监听端口" ID="BO5F6iu0os" _mubu_text="%3Cspan%20class=%22codespan%22%3E3.%20listen()%20//%20%E5%BC%80%E5%A7%8B%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3%3C/span%3E" STYLE="fork"/>
        <node TEXT="4. accept() // 返回新建立连接的文件描述符" ID="jB8FsmE3rx" _mubu_text="%3Cspan%20class=%22codespan%22%3E4.%20accept()%20//%20%E8%BF%94%E5%9B%9E%E6%96%B0%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%3C/span%3E" STYLE="fork"/>
      </node>
      <node TEXT="构造EchoServer对象" ID="5FP4cLQtvz" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0EchoServer%E5%AF%B9%E8%B1%A1%3C/span%3E" STYLE="fork">
        <node TEXT="构造EchoServer" ID="MOgdPtTnCy" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0%3C/span%3E%3Cspan%20class=%22codespan%22%3EEchoServer%3C/span%3E" STYLE="fork">
          <node TEXT="构造TcpServer" ID="J915YaBI6v" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer%3C/span%3E" STYLE="fork">
            <node TEXT="构造Acceptor" ID="EuIS7cz1Lp" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0%3C/span%3E%3Cspan%20class=%22codespan%22%3EAcceptor%3C/span%3E" STYLE="fork">
              <node TEXT="构造一个非阻塞的socket，并构造一个Socket 完成步骤1" ID="usBKlYNT3K" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E9%9D%9E%E9%98%BB%E5%A1%9E%E7%9A%84%3C/span%3E%3Cspan%20class=%22codespan%22%3Esocket%3C/span%3E%3Cspan%3E%EF%BC%8C%E5%B9%B6%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%3C/span%3E%3Cspan%20class=%22codespan%22%3ESocket%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22bold%20text-color-purple%22%3E%E5%AE%8C%E6%88%90%E6%AD%A5%E9%AA%A41%3C/span%3E" STYLE="fork">
                <node TEXT="Socket是socketFd及相应处理函数的封装" ID="8RDBnZN8vz" _mubu_text="%3Cspan%3ESocket%E6%98%AFsocketFd%E5%8F%8A%E7%9B%B8%E5%BA%94%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E7%9A%84%E5%B0%81%E8%A3%85%3C/span%3E" STYLE="fork"/>
              </node>
              <node TEXT="构造一个Channel" ID="KXr5XcDg6p" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%3C/span%3E%3Cspan%20class=%22codespan%22%3EChannel%3C/span%3E" STYLE="fork">
                <node TEXT="和EventLoop和socketfd绑定" ID="srPVOAHknX" _mubu_text="%3Cspan%3E%E5%92%8CEventLoop%E5%92%8Csocketfd%E7%BB%91%E5%AE%9A%3C/span%3E" STYLE="fork"/>
              </node>
              <node TEXT="调用Socket的bindAddress" ID="Z3dEEAndCH" _mubu_text="%3Cspan%3E%E8%B0%83%E7%94%A8Socket%E7%9A%84bindAddress%3C/span%3E" STYLE="fork"/>
              <node TEXT="监听套接字绑定监听地址 完成步骤2" ID="z35VrfyReb" _mubu_text="%3Cspan%3E%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BB%91%E5%AE%9A%E7%9B%91%E5%90%AC%E5%9C%B0%E5%9D%80%20%3C/span%3E%3Cspan%20class=%22bold%20text-color-purple%22%3E%E5%AE%8C%E6%88%90%E6%AD%A5%E9%AA%A42%3C/span%3E" STYLE="fork"/>
              <node TEXT="设置channel读回调函数 Acceptor::hanleRead()" ID="fue9PiY0S6" _mubu_text="%3Cspan%3E%E8%AE%BE%E7%BD%AEchannel%E8%AF%BB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EAcceptor::hanleRead()%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="构造EventLoopThreadPool" ID="OFruGiuuwi" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0%3C/span%3E%3Cspan%20class=%22codespan%22%3EEventLoopThreadPool%3C/span%3E" STYLE="fork">
              <node TEXT="初始化baseloop，其baseloop和Acceptor所属的eventloop相同" ID="3Dro5ob1IF" _mubu_text="%3Cspan%3E%E5%88%9D%E5%A7%8B%E5%8C%96baseloop%EF%BC%8C%E5%85%B6baseloop%E5%92%8CAcceptor%E6%89%80%E5%B1%9E%E7%9A%84eventloop%E7%9B%B8%E5%90%8C%3C/span%3E" STYLE="fork"/>
            </node>
            <node TEXT="构造TcpServer时使用的是默认连接到来回调函数和消息到来回调函数" ID="uWv08x77yG" _mubu_text="%3Cspan%3E%E6%9E%84%E9%80%A0TcpServer%E6%97%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%E9%BB%98%E8%AE%A4%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%9D%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%92%8C%E6%B6%88%E6%81%AF%E5%88%B0%E6%9D%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%3C/span%3E" STYLE="fork"/>
            <node TEXT="设置连接建立回调函数 TcpServer::newConnection" ID="TUBvniIlwU" _mubu_text="%3Cspan%3E%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer::newConnection%3C/span%3E" STYLE="fork"/>
          </node>
          <node TEXT="设置回调函数" ID="vzlmrMk9Ls" _mubu_text="%3Cspan%3E%E8%AE%BE%E7%BD%AE%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%3C/span%3E" STYLE="fork">
            <node TEXT="TcpServer中的连接到来回调函数 EchoServer::onConnection" ID="7HomRYFHoA" _mubu_text="%3Cspan%3ETcpServer%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%9D%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EEchoServer::onConnection%3C/span%3E" STYLE="fork"/>
            <node TEXT="TcpServer中的消息到来回调函数 EchoServer::onMessage" ID="1z7Ocs80Lu" _mubu_text="%3Cspan%3ETcpServer%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%E5%88%B0%E6%9D%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EEchoServer::onMessage%3C/span%3E" STYLE="fork"/>
          </node>
        </node>
      </node>
      <node TEXT="启动server" ID="JyDYzYzE6z" _mubu_text="%3Cspan%3E%E5%90%AF%E5%8A%A8server%3C/span%3E" STYLE="fork">
        <node TEXT="EchoServer.start()" ID="9Dad6f8zU8" _mubu_text="%3Cspan%3EEchoServer.start()%3C/span%3E" STYLE="fork"/>
        <node TEXT="TcpServer.start()" ID="UbbysFQ1JN" _mubu_text="%3Cspan%3ETcpServer.start()%3C/span%3E" STYLE="fork">
          <node TEXT="线程池初始化 EventLoopThreadPool.start(threadInitCallback_);" ID="NmEptKGbUE" _mubu_text="%3Cspan%3E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9D%E5%A7%8B%E5%8C%96%20EventLoopThreadPool.start(threadInitCallback_);%3C/span%3E" STYLE="fork"/>
          <node TEXT="监听套接字上启动listen函数，即EventLoop.runInLoop() 在线程中Acceptor::listen函数 完成步骤3" ID="F7M5IuhYOx" _mubu_text="%3Cspan%3E%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97%E4%B8%8A%E5%90%AF%E5%8A%A8listen%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8D%B3EventLoop.runInLoop()%20%E5%9C%A8%E7%BA%BF%E7%A8%8B%E4%B8%ADAcceptor::listen%E5%87%BD%E6%95%B0%20%3C/span%3E%3Cspan%20class=%22bold%20text-color-purple%22%3E%E5%AE%8C%E6%88%90%E6%AD%A5%E9%AA%A43%3C/span%3E" STYLE="fork"/>
        </node>
      </node>
      <node TEXT="启动EventLoop" ID="Jhtcqk28Ir" _mubu_text="%3Cspan%3E%E5%90%AF%E5%8A%A8EventLoop%3C/span%3E" STYLE="fork">
        <node TEXT="该步骤完成后，程序完成对地址的监听，但是eventloop尚未启动" ID="i17A52BaTU" _mubu_text="%3Cspan%3E%E8%AF%A5%E6%AD%A5%E9%AA%A4%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E7%A8%8B%E5%BA%8F%E5%AE%8C%E6%88%90%E5%AF%B9%E5%9C%B0%E5%9D%80%E7%9A%84%E7%9B%91%E5%90%AC%EF%BC%8C%E4%BD%86%E6%98%AFeventloop%E5%B0%9A%E6%9C%AA%E5%90%AF%E5%8A%A8%3C/span%3E" STYLE="fork"/>
        <node TEXT="调用loop.loop()，程序开始监听套接字的可读事件" ID="4izkxwPF3I" _mubu_text="%3Cspan%3E%E8%B0%83%E7%94%A8loop.loop()%EF%BC%8C%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%A7%8B%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97%E7%9A%84%E5%8F%AF%E8%AF%BB%E4%BA%8B%E4%BB%B6%3C/span%3E" STYLE="fork"/>
      </node>
      <node TEXT="客户端发起连接" ID="ibn9zRg9IB" _mubu_text="%3Cspan%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%BF%9E%E6%8E%A5%3C/span%3E" STYLE="fork">
        <node TEXT="调用accept函数，完成步骤4，实现连接建立，得到一个已连接的文件描述符" ID="POabuwR0Ma" _mubu_text="%3Cspan%3E%E8%B0%83%E7%94%A8accept%E5%87%BD%E6%95%B0%EF%BC%8C%3C/span%3E%3Cspan%20class=%22bold%20text-color-purple%22%3E%E5%AE%8C%E6%88%90%E6%AD%A5%E9%AA%A44%3C/span%3E%3Cspan%3E%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%EF%BC%8C%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E5%B7%B2%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%3C/span%3E" STYLE="fork"/>
        <node TEXT="回调TcpServer::newConnection，创建TcpConnection对象" ID="KEfQtTi7u0" _mubu_text="%3Cspan%3E%E5%9B%9E%E8%B0%83TcpServer::newConnection%EF%BC%8C%E5%88%9B%E5%BB%BATcpConnection%E5%AF%B9%E8%B1%A1%3C/span%3E" STYLE="fork"/>
        <node TEXT="选取线程池中的一个线程，将TcpConnection::connectEstablished()添加到其任务队列中，该函数将已连接的socket的可读事件注册到Poller中" ID="T0cIbxv8Gx" _mubu_text="%3Cspan%3E%E9%80%89%E5%8F%96%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%B0%86TcpConnection::connectEstablished()%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%85%B6%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B8%AD%EF%BC%8C%E8%AF%A5%E5%87%BD%E6%95%B0%E5%B0%86%E5%B7%B2%E8%BF%9E%E6%8E%A5%E7%9A%84socket%E7%9A%84%E5%8F%AF%E8%AF%BB%E4%BA%8B%E4%BB%B6%E6%B3%A8%E5%86%8C%E5%88%B0Poller%E4%B8%AD%3C/span%3E" STYLE="fork"/>
      </node>
    </node>
    <node TEXT="消息读取" ID="2aVMYF1CCa" _mubu_text="%3Cspan%3E%E6%B6%88%E6%81%AF%E8%AF%BB%E5%8F%96%3C/span%3E" STYLE="bubble" POSITION="right">
      <node TEXT="socket上可读事件触发，事件处理对应的callback会在eventloop中调用，该回调函数实际上是TcpConnection::handleRead，该函数从socket函数中读取数据，并将其放入输入缓冲区中，然后调用消息到来回调函数，执行业务逻辑，TcpConnection::messageCallback 绑定到TcpServer::messageCallback，该函数通常实现消息编解码、消息分发等工作" ID="uc8PUDUKa3" _mubu_text="%3Cspan%3Esocket%E4%B8%8A%E5%8F%AF%E8%AF%BB%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%EF%BC%8C%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%AF%B9%E5%BA%94%E7%9A%84callback%E4%BC%9A%E5%9C%A8eventloop%E4%B8%AD%E8%B0%83%E7%94%A8%EF%BC%8C%E8%AF%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%AE%9E%E9%99%85%E4%B8%8A%E6%98%AF%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::handleRead%3C/span%3E%3Cspan%3E%EF%BC%8C%E8%AF%A5%E5%87%BD%E6%95%B0%E4%BB%8Esocket%E5%87%BD%E6%95%B0%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E6%94%BE%E5%85%A5%E8%BE%93%E5%85%A5%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%AD%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B0%83%E7%94%A8%E6%B6%88%E6%81%AF%E5%88%B0%E6%9D%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%8C%E6%89%A7%E8%A1%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%EF%BC%8C%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::messageCallback%3C/span%3E%3Cspan%3E%20%E7%BB%91%E5%AE%9A%E5%88%B0%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer::messageCallback%3C/span%3E%3Cspan%3E%EF%BC%8C%E8%AF%A5%E5%87%BD%E6%95%B0%E9%80%9A%E5%B8%B8%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E7%BC%96%E8%A7%A3%E7%A0%81%E3%80%81%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%91%E7%AD%89%E5%B7%A5%E4%BD%9C%3C/span%3E" STYLE="fork"/>
    </node>
    <node TEXT="消息发送" ID="vRrZGsJ3P5" _mubu_text="%3Cspan%3E%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%3C/span%3E" STYLE="bubble" POSITION="right">
      <node TEXT="通过调用TcpConnection::send()向客户端回复消息" ID="I99G9z3smk" _mubu_text="%3Cspan%3E%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8TcpConnection::send()%E5%90%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9B%9E%E5%A4%8D%E6%B6%88%E6%81%AF%3C/span%3E" STYLE="fork"/>
      <node TEXT="要保证线程安全问题，对于消息的读写必须在eventloop的同一个线程（I/O线程）sendInloop" ID="9FGuXYSU9d" _mubu_text="%3Cspan%3E%E8%A6%81%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%8C%E5%AF%B9%E4%BA%8E%E6%B6%88%E6%81%AF%E7%9A%84%E8%AF%BB%E5%86%99%E5%BF%85%E9%A1%BB%E5%9C%A8eventloop%E7%9A%84%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%88I/O%E7%BA%BF%E7%A8%8B%EF%BC%89%3C/span%3E%3Cspan%20class=%22codespan%22%3EsendInloop%3C/span%3E" STYLE="fork"/>
      <node TEXT="sendInloop" ID="rQrfM7jMG7" _mubu_text="%3Cspan%20class=%22codespan%22%3EsendInloop%3C/span%3E" STYLE="fork">
        <node TEXT="如果输出缓冲区为空，则直接向socket写数据" ID="0rbOJNNEGX" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E8%BE%93%E5%87%BA%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%BA%E7%A9%BA%EF%BC%8C%E5%88%99%E7%9B%B4%E6%8E%A5%E5%90%91socket%E5%86%99%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
        <node TEXT="如果socket不能接收全部数据，则统计剩余数据，并进行下一步" ID="mOHwULYhfk" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9Csocket%E4%B8%8D%E8%83%BD%E6%8E%A5%E6%94%B6%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%88%99%E7%BB%9F%E8%AE%A1%E5%89%A9%E4%BD%99%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%3C/span%3E" STYLE="fork"/>
        <node TEXT="如果将剩余数据+输出缓冲区的现有数据字节数之和大于高水位标，则将highWaterMarkCallback放入待执行队列中，并将socket的可写事件注册到eventloop中" ID="6DUnAyv7Rb" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E5%B0%86%E5%89%A9%E4%BD%99%E6%95%B0%E6%8D%AE+%E8%BE%93%E5%87%BA%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9A%84%E7%8E%B0%E6%9C%89%E6%95%B0%E6%8D%AE%E5%AD%97%E8%8A%82%E6%95%B0%E4%B9%8B%E5%92%8C%E5%A4%A7%E4%BA%8E%E9%AB%98%E6%B0%B4%E4%BD%8D%E6%A0%87%EF%BC%8C%E5%88%99%E5%B0%86%3C/span%3E%3Cspan%20class=%22codespan%22%3EhighWaterMarkCallback%3C/span%3E%3Cspan%3E%E6%94%BE%E5%85%A5%E5%BE%85%E6%89%A7%E8%A1%8C%E9%98%9F%E5%88%97%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%B0%86socket%E7%9A%84%E5%8F%AF%E5%86%99%E4%BA%8B%E4%BB%B6%E6%B3%A8%E5%86%8C%E5%88%B0eventloop%E4%B8%AD%3C/span%3E" STYLE="fork"/>
      </node>
      <node TEXT="socket的可写事件对应的回调函数是TcpConnection::handleWrite()，该函数完成的工作" ID="qfqdGgplYi" _mubu_text="%3Cspan%3Esocket%E7%9A%84%E5%8F%AF%E5%86%99%E4%BA%8B%E4%BB%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%98%AF%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::handleWrite()%3C/span%3E%3Cspan%3E%EF%BC%8C%E8%AF%A5%E5%87%BD%E6%95%B0%E5%AE%8C%E6%88%90%E7%9A%84%E5%B7%A5%E4%BD%9C%3C/span%3E" STYLE="fork">
        <node TEXT="尽可能将数据从OutputBuffer中向socket中写入数据" ID="GiRE3aoAK0" _mubu_text="%3Cspan%3E%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%B0%86%E6%95%B0%E6%8D%AE%E4%BB%8EOutputBuffer%E4%B8%AD%E5%90%91socket%E4%B8%AD%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%3C/span%3E" STYLE="fork"/>
        <node TEXT="如果OutputBuffer没有剩余的数据，则将该socket的可写事件移除，并调用writeCompleteCallback" ID="2Tb7LRk0Jh" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9COutputBuffer%E6%B2%A1%E6%9C%89%E5%89%A9%E4%BD%99%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%88%99%3C/span%3E%3Cspan%20class=%22bold%22%3E%E5%B0%86%E8%AF%A5socket%E7%9A%84%E5%8F%AF%E5%86%99%E4%BA%8B%E4%BB%B6%E7%A7%BB%E9%99%A4%3C/span%3E%3Cspan%3E%EF%BC%8C%E5%B9%B6%E8%B0%83%E7%94%A8%3C/span%3E%3Cspan%20class=%22codespan%22%3EwriteCompleteCallback%3C/span%3E" STYLE="fork"/>
      </node>
    </node>
    <node TEXT="连接断开" ID="iv3uQj0Ei2" _mubu_text="%3Cspan%3E%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80%3C/span%3E" STYLE="bubble" POSITION="left">
      <node TEXT="感知远程断开这一步是在Tcp连接的可读事件处理函数handleRead中进行的：当对socket进行read操作时，返回值为0，则说明此时连接已断开" ID="wrf2LYhVIB" _mubu_text="%3Cspan%3E%E6%84%9F%E7%9F%A5%E8%BF%9C%E7%A8%8B%E6%96%AD%E5%BC%80%E8%BF%99%E4%B8%80%E6%AD%A5%E6%98%AF%E5%9C%A8Tcp%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E8%AF%BB%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%3C/span%3E%3Cspan%20class=%22codespan%22%3EhandleRead%3C/span%3E%3Cspan%3E%E4%B8%AD%E8%BF%9B%E8%A1%8C%E7%9A%84%EF%BC%9A%E5%BD%93%E5%AF%B9socket%E8%BF%9B%E8%A1%8Cread%E6%93%8D%E4%BD%9C%E6%97%B6%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BA0%EF%BC%8C%E5%88%99%E8%AF%B4%E6%98%8E%E6%AD%A4%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%B7%B2%E6%96%AD%E5%BC%80%3C/span%3E" STYLE="fork"/>
      <node TEXT="将Tcp连接对应的事件在eventloop中移除" ID="0K24xThQFW" _mubu_text="%3Cspan%3E%E5%B0%86Tcp%E8%BF%9E%E6%8E%A5%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%9C%A8eventloop%E4%B8%AD%E7%A7%BB%E9%99%A4%3C/span%3E" STYLE="fork"/>
      <node TEXT="调用用户的ConnectionCallback" ID="0diJPkfsD2" _mubu_text="%3Cspan%3E%E8%B0%83%E7%94%A8%E7%94%A8%E6%88%B7%E7%9A%84ConnectionCallback%3C/span%3E" STYLE="fork"/>
      <node TEXT="将TcpConnection对象从TcpServer中移除" ID="JVb40tZnsY" _mubu_text="%3Cspan%3E%E5%B0%86TcpConnection%E5%AF%B9%E8%B1%A1%E4%BB%8ETcpServer%E4%B8%AD%E7%A7%BB%E9%99%A4%3C/span%3E" STYLE="fork"/>
      <node TEXT="close对一个的fd，该步骤是在析构函数中被动触发的，TcpConnection对象移除后，引用计数为0，对象析构时会调用close" ID="rNv70JSwSS" _mubu_text="%3Cspan%3Eclose%E5%AF%B9%E4%B8%80%E4%B8%AA%E7%9A%84fd%EF%BC%8C%E8%AF%A5%E6%AD%A5%E9%AA%A4%E6%98%AF%E5%9C%A8%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E4%B8%AD%E8%A2%AB%E5%8A%A8%E8%A7%A6%E5%8F%91%E7%9A%84%EF%BC%8CTcpConnection%E5%AF%B9%E8%B1%A1%E7%A7%BB%E9%99%A4%E5%90%8E%EF%BC%8C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E4%B8%BA0%EF%BC%8C%E5%AF%B9%E8%B1%A1%E6%9E%90%E6%9E%84%E6%97%B6%E4%BC%9A%E8%B0%83%E7%94%A8close%3C/span%3E" STYLE="fork"/>
      <node TEXT="handleRead读取字节数为0 → handleClose → closeCallback 即TcpServer::removeConnection →  TcpConnection::connectDestroyed   修改移除channel所有专注事件，并且回调connectionCallback_，最后移除channelChannel::remove() → loop_-&gt;removeChannel() → poller_-&gt;removeChannel(channel)" ID="voOtSm5SX0" _mubu_text="%3Cspan%20class=%22codespan%22%3EhandleRead%3C/span%3E%3Cspan%3E%E8%AF%BB%E5%8F%96%E5%AD%97%E8%8A%82%E6%95%B0%E4%B8%BA0%20%E2%86%92%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EhandleClose%3C/span%3E%3Cspan%3E%20%E2%86%92%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EcloseCallback%3C/span%3E%3Cspan%3E%20%E5%8D%B3%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer::removeConnection%3C/span%3E%3Cspan%3E%20%E2%86%92%20%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::connectDestroyed%3C/span%3E%3Cspan%3E%20%20%20%E4%BF%AE%E6%94%B9%E7%A7%BB%E9%99%A4channel%E6%89%80%E6%9C%89%E4%B8%93%E6%B3%A8%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9B%9E%E8%B0%83%3C/span%3E%3Cspan%20class=%22codespan%22%3EconnectionCallback_%3C/span%3E%3Cspan%3E%EF%BC%8C%E6%9C%80%E5%90%8E%E7%A7%BB%E9%99%A4channel%3C/span%3E%3Cspan%20class=%22codespan%22%3EChannel::remove()%3C/span%3E%3Cspan%3E%20%E2%86%92%20%3C/span%3E%3Cspan%20class=%22codespan%22%3Eloop_-&amp;gt;removeChannel()%3C/span%3E%3Cspan%3E%20%E2%86%92%20%3C/span%3E%3Cspan%20class=%22codespan%22%3Epoller_-&amp;gt;removeChannel(channel)%3C/span%3E" STYLE="fork"/>
    </node>
    <node TEXT="回调函数" ID="H4O5FLikiV" _mubu_text="%3Cspan%3E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%3C/span%3E" STYLE="bubble" POSITION="left">
      <node TEXT="Channel" ID="KykfBO5MZK" _mubu_text="%3Cspan%20class=%22codespan%22%3EChannel%3C/span%3E" STYLE="fork">
        <node TEXT="如果是TcpConnection的channel" ID="P9MsQCYZTn" _mubu_text="%3Cspan%3E%E5%A6%82%E6%9E%9C%E6%98%AFTcpConnection%E7%9A%84channel%3C/span%3E" STYLE="fork">
          <node TEXT="readCallback TcpConnection::handleRead" ID="epTwWEvxVa" _mubu_text="%3Cspan%20class=%22codespan%22%3EreadCallback%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::handleRead%3C/span%3E" STYLE="fork"/>
          <node TEXT="writeCallback_ TcpConnection::handleWrite" ID="qgSBSVrOsq" _mubu_text="%3Cspan%20class=%22codespan%22%3EwriteCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::handleWrite%3C/span%3E" STYLE="fork"/>
          <node TEXT="closeCallback_ TcpConnection::handleClose" ID="gos5tA4Bad" _mubu_text="%3Cspan%20class=%22codespan%22%3EcloseCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::handleClose%3C/span%3E" STYLE="fork"/>
          <node TEXT="errorCallback_ TcpConnection::handleError" ID="gCXPEbhPI3" _mubu_text="%3Cspan%20class=%22codespan%22%3EerrorCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::handleError%3C/span%3E" STYLE="fork"/>
        </node>
        <node TEXT="Acceptor::handleRead 该函数会为连接创建一个新的文件描述符，回调TcpServer::newConnection，用该文件描述符创建新的TcpConnection" ID="I8RuZbqpXp" _mubu_text="%3Cspan%20class=%22codespan%22%3EAcceptor::handleRead%3C/span%3E%3Cspan%3E%20%E8%AF%A5%E5%87%BD%E6%95%B0%E4%BC%9A%E4%B8%BA%E8%BF%9E%E6%8E%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%EF%BC%8C%E5%9B%9E%E8%B0%83%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer::newConnection%3C/span%3E%3Cspan%3E%EF%BC%8C%E7%94%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84TcpConnection%3C/span%3E" STYLE="fork"/>
      </node>
      <node TEXT="Acceptor" ID="7oFm5FNbjD" _mubu_text="%3Cspan%20class=%22codespan%22%3EAcceptor%3C/span%3E" STYLE="fork">
        <node TEXT="newConnectionCallback_ TcpServer::newConnection" ID="dBIQ007H9L" _mubu_text="%3Cspan%20class=%22codespan%22%3EnewConnectionCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer::newConnection%3C/span%3E" STYLE="fork"/>
      </node>
      <node TEXT="TcpServer" ID="AwZX5dNwTj" _mubu_text="%3Cspan%20class=%22codespan%22%3ETcpServer%3C/span%3E" STYLE="fork">
        <node TEXT="connectionCallback_ EchoServer::onConnection" ID="4xZ2eFJtTB" _mubu_text="%3Cspan%20class=%22codespan%22%3EconnectionCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EEchoServer::onConnection%3C/span%3E" STYLE="fork"/>
        <node TEXT="messageCallback_ EchoServer::onMessage" ID="qzTrYbfKhI" _mubu_text="%3Cspan%20class=%22codespan%22%3EmessageCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EEchoServer::onMessage%3C/span%3E" STYLE="fork"/>
        <node TEXT="writeCompleteCallback_" ID="0lBK1I7PX5" _mubu_text="%3Cspan%20class=%22codespan%22%3EwriteCompleteCallback_%3C/span%3E" STYLE="fork"/>
        <node TEXT="threadInitCallback_" ID="v57ySSy0Or" _mubu_text="%3Cspan%20class=%22codespan%22%3EthreadInitCallback_%3C/span%3E" STYLE="fork"/>
      </node>
      <node TEXT="TcpConnection" ID="mJ9Ivqzmsm" _mubu_text="%3Cspan%20class=%22codespan%22%3ETcpConnection%3C/span%3E" STYLE="fork">
        <node TEXT="connectionCallback_ connectionCallback_" ID="rNWbCv9h1x" _mubu_text="%3Cspan%20class=%22codespan%22%3EconnectionCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EconnectionCallback_%3C/span%3E" STYLE="fork"/>
        <node TEXT="messageCallback_ messageCallback_" ID="MwwU4Uhu4h" _mubu_text="%3Cspan%20class=%22codespan%22%3EmessageCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EmessageCallback_%3C/span%3E" STYLE="fork"/>
        <node TEXT="writeCompleteCallback_ writeCompleteCallback_" ID="Y405ZPmEUW" _mubu_text="%3Cspan%20class=%22codespan%22%3EwriteCompleteCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3EwriteCompleteCallback_%3C/span%3E" STYLE="fork"/>
        <node TEXT="closeCallback_ TcpServer::removeConnection 将TcpConnection从TcpServer的连接列表中移除，然后调用TcpConnection::connectDestroyed，修改移除channel所有专注事件，并且回调connectionCallback_，最后移除channelChannel::remove() → loop_-&gt;removeChannel() → poller_-&gt;removeChannel(channel)" ID="esxgODqynB" _mubu_text="%3Cspan%20class=%22codespan%22%3EcloseCallback_%3C/span%3E%3Cspan%3E%20%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpServer::removeConnection%3C/span%3E%3Cspan%3E%20%E5%B0%86TcpConnection%E4%BB%8ETcpServer%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%88%97%E8%A1%A8%E4%B8%AD%E7%A7%BB%E9%99%A4%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B0%83%E7%94%A8%3C/span%3E%3Cspan%20class=%22codespan%22%3ETcpConnection::connectDestroyed%3C/span%3E%3Cspan%3E%EF%BC%8C%E4%BF%AE%E6%94%B9%E7%A7%BB%E9%99%A4channel%E6%89%80%E6%9C%89%E4%B8%93%E6%B3%A8%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9B%9E%E8%B0%83%3C/span%3E%3Cspan%20class=%22codespan%22%3EconnectionCallback_%3C/span%3E%3Cspan%3E%EF%BC%8C%E6%9C%80%E5%90%8E%E7%A7%BB%E9%99%A4channel%3C/span%3E%3Cspan%20class=%22codespan%22%3EChannel::remove()%3C/span%3E%3Cspan%3E%20%E2%86%92%20%3C/span%3E%3Cspan%20class=%22codespan%22%3Eloop_-&amp;gt;removeChannel()%3C/span%3E%3Cspan%3E%20%E2%86%92%20%3C/span%3E%3Cspan%20class=%22codespan%22%3Epoller_-&amp;gt;removeChannel(channel)%3C/span%3E" STYLE="fork"/>
        <node TEXT="highWaterMarkCallback_" ID="zzx2GRqkvK" _mubu_text="%3Cspan%20class=%22codespan%22%3EhighWaterMarkCallback_%3C/span%3E" STYLE="fork"/>
      </node>
    </node>
  </node>
</map>